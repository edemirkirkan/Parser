%{
int lineCount = 1;
%}

ASSIGN_OPERATOR =
NEWLINE \n
ARRAY_ACCESS {LB}({DIGIT})+{RB}
EQUALITY_OPERATOR ==
COMMENT {HASHTAG}([^\n])*\n
HASHTAG #
MOD \%
SEMI_COLON \;
ADD_OPERATOR \+
SUB_OPERATOR \-
DIV_OPERATOR \/
MULP_OPERATOR \*
POW_OPERATOR \^
NOT_EQUAL_OPERATOR !=
NOT_OPERATOR !
LESS_THAN_OPERATOR <
GREATER_THAN_OPERATOR >
LESS_AND_EQUAL_OPERATOR <=
GREATER_AND_EQUAL_OPERATOR >=
CONNECT_WIFI ~connectWifi
TURN_ON_NOZZLE ~turnOnNozzle
TURN_OFF_NOZZLE ~turnOffNozzle
READ_HEADING ~readHeading
READ_ALTITUDE ~readAltitude
READ_INCLATION ~readInclation
READ_TEMPERATURE ~readTemp
TURN ~turn
RIGHT RIGHT
LEFT LEFT
MOVE ~move
FORWARD FORWARD
BACKWARD BACKWARD
UP UP
DOWN DOWN
STOP ~stop
AND \&\&
OR \|\|
ELSE else
ELIF elif
LP \(
RP \)
LCB \{
RCB \}
LB \[
RB \]
COMMA ,
DOT \.
LETTER [a-zA-Z]
FUNCTION function
ARRAY array
IF if
WHILE while
FOR for
PRINT print
INPUT input
TRUE true
FALSE false
BOOLEAN TRUE|FALSE
INT {SIGN}?({DIGIT})+
FLOAT {SIGN}?{DIGIT}*(\.)?{DIGIT}+
ALPHABETIC ([A-Za-z]|{UNDER_SCORE}|{DOLLAR_SIGN})
DIGIT [0-9]
SIGN [+-]
ALPHANUMERIC ({ALPHABETIC}|{DIGIT})
FUNCTION_NAME (~{IDENTIFIER})
IDENTIFIER {ALPHABETIC}{ALPHANUMERIC}*
UNDER_SCORE \_
DOLLAR_SIGN $
STRING \"([^\\\"]|\\\"|\\\n|\\\\)*\" 
%%
{FUNCTION} return FUNCTION;
{ARRAY} return ARRAY;
{ASSIGN_OPERATOR} return ASSIGN_OPERATOR;
{EQUALITY_OPERATOR} return EQUALITY_OPERATOR;
{HASHTAG} return HASHTAG;
{AND} return AND;
{OR} return OR;
{ELSE} return ELSE;
{ELIF} return ELIF;
{LP} return LP;
{RP} return RP;
{LCB} return LCB;
{RCB} return RCB;
{COMMA} return COMMA;
{DOT} return DOT;
{INT} return INT;
{FLOAT} return FLOAT;
{IF} return IF;
{WHILE} return WHILE;
{PRINT} return PRINT;
{INPUT} return INPUT;
{FOR} return FOR;
{TRUE} return TRUE;
{FALSE} return FALSE;
{BOOLEAN} return BOOLEAN;
{STRING} return STRING;
{CONNECT_WIFI} return CONNECT_WIFI;
{TURN_ON_NOZZLE} return TURN_ON_NOZZLE;
{TURN_OFF_NOZZLE} return TURN_OFF_NOZZLE;
{READ_HEADING} return READ_HEADING;
{READ_INCLATION} return READ_INCLATION;
{READ_ALTITUDE} return READ_ALTITUDE;
{READ_TEMPERATURE} return READ_TEMPERATURE;
{MOVE} return MOVE;
{FORWARD} return FORWARD;
{BACKWARD} return BACKWARD;
{UP} return UP;
{DOWN} return DOWN;
{STOP} return STOP;
{TURN} return TURN;
{LEFT} return LEFT;
{RIGHT} return RIGHT;
{FUNCTION_NAME} return FUNCTION_NAME;
{IDENTIFIER} return IDENTIFIER;
{COMMENT} { lineCount++; return COMMENT;}
{MOD} return MOD;
{ADD_OPERATOR} return ADD_OPERATOR;
{SUB_OPERATOR} return SUB_OPERATOR;
{DIV_OPERATOR} return DIV_OPERATOR;
{MULP_OPERATOR} return MULP_OPERATOR;
{POW_OPERATOR} return POW_OPERATOR;
{NEWLINE} {lineCount++;}
{NOT_EQUAL_OPERATOR} return NOT_EQUAL_OPERATOR;
{LESS_THAN_OPERATOR} return LESS_THAN_OPERATOR;
{GREATER_THAN_OPERATOR} return GREATER_THAN_OPERATOR;
{LESS_AND_EQUAL_OPERATOR} return LESS_AND_EQUAL_OPERATOR;
{GREATER_AND_EQUAL_OPERATOR} return GREATER_AND_EQUAL_OPERATOR;
{LB} return LB;
{RB} return RB;
{SEMI_COLON} return SEMI_COLON;
{NOT_OPERATOR} return NOT;
%%
int yywrap() { return 1; }